# coding: utf-8

"""
    Demo Service - Internal API

    내부 서비스 간 통신을 위한 API 명세 (비공개)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List
from typing import Optional, Set
from typing_extensions import Self

class InternalUserResponse(BaseModel):
    """
    내부 서비스에 제공되는 사용자 정보
    """ # noqa: E501
    id: StrictStr = Field(description="사용자 ID (문자열 형태)")
    name: StrictStr = Field(description="사용자 이름 (닉네임)")
    email: StrictStr = Field(description="사용자 이메일 주소")
    role: StrictStr = Field(description="사용자 역할 (예 user, admin)")
    profile_image_url: StrictStr = Field(description="사용자 프로필 이미지 URL")
    last_active_at: StrictInt = Field(description="마지막 활동 시간 (Unix timestamp, epoch milliseconds)")
    updated_at: StrictInt = Field(description="마지막 정보 수정 시간 (Unix timestamp, epoch milliseconds)")
    created_at: StrictInt = Field(description="계정 생성 시간 (Unix timestamp, epoch milliseconds)")
    __properties: ClassVar[List[str]] = ["id", "name", "email", "role", "profile_image_url", "last_active_at", "updated_at", "created_at"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of InternalUserResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of InternalUserResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "email": obj.get("email"),
            "role": obj.get("role"),
            "profile_image_url": obj.get("profile_image_url"),
            "last_active_at": obj.get("last_active_at"),
            "updated_at": obj.get("updated_at"),
            "created_at": obj.get("created_at")
        })
        return _obj


