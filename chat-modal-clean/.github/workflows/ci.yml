name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  NODE_VERSION: '20'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/react-migration

jobs:
  test:
    runs-on: ubuntu-latest
    name: Test & Lint
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: 'open-webui/react-migration/package-lock.json'
        
    - name: Install dependencies
      working-directory: ./open-webui/react-migration
      run: npm ci
      
    - name: Type check
      working-directory: ./open-webui/react-migration
      run: npm run type-check
      
    - name: Lint
      working-directory: ./open-webui/react-migration
      run: npm run lint
      
    - name: Format check
      working-directory: ./open-webui/react-migration
      run: npm run format:check
      
    - name: Build
      working-directory: ./open-webui/react-migration
      run: npm run build
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-files
        path: ./open-webui/react-migration/dist
        retention-days: 1

  e2e-tests:
    runs-on: ubuntu-latest
    name: E2E Tests
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: 'open-webui/react-migration/package-lock.json'
        
    - name: Install dependencies
      working-directory: ./open-webui/react-migration
      run: npm ci
      
    - name: Install Playwright browsers
      working-directory: ./open-webui/react-migration
      run: npx playwright install --with-deps
      
    - name: Build application
      working-directory: ./open-webui/react-migration
      run: npm run build
      
    - name: Run Playwright tests
      working-directory: ./open-webui/react-migration
      run: npm run test
      
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-report
        path: ./open-webui/react-migration/playwright-report
        retention-days: 30

  security-scan:
    runs-on: ubuntu-latest
    name: Security Scan
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: 'open-webui/react-migration/package-lock.json'
        
    - name: Install dependencies
      working-directory: ./open-webui/react-migration
      run: npm ci
      
    - name: Run security audit
      working-directory: ./open-webui/react-migration
      run: npm audit --audit-level=moderate
      
    - name: Run CodeQL Analysis
      uses: github/codeql-action/init@v3
      with:
        languages: javascript
        
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3

  docker-build:
    runs-on: ubuntu-latest
    name: Docker Build & Push
    needs: [test, e2e-tests]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    permissions:
      contents: read
      packages: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./open-webui/react-migration
        file: ./open-webui/react-migration/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          VITE_API_BASE_URL=https://api.example.com
          VITE_APP_VERSION=${{ github.sha }}
          NODE_ENV=production

  deploy-staging:
    runs-on: ubuntu-latest
    name: Deploy to Staging
    needs: docker-build
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'
        
    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBE_CONFIG_STAGING }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig
        
    - name: Deploy to staging
      run: |
        export KUBECONFIG=kubeconfig
        kubectl set image deployment/react-migration-staging react-migration=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:develop -n ugot-frontend-staging
        kubectl rollout status deployment/react-migration-staging -n ugot-frontend-staging --timeout=300s

  deploy-production:
    runs-on: ubuntu-latest
    name: Deploy to Production
    needs: docker-build
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'
        
    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBE_CONFIG_PRODUCTION }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig
        
    - name: Deploy to production
      run: |
        export KUBECONFIG=kubeconfig
        kubectl set image deployment/react-migration react-migration=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest -n ugot-frontend
        kubectl rollout status deployment/react-migration -n ugot-frontend --timeout=300s
        
    - name: Create GitHub Release
      if: success()
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        body: |
          Automated release for commit ${{ github.sha }}
          
          Changes in this release:
          ${{ github.event.head_commit.message }}
        draft: false
        prerelease: false

  notify:
    runs-on: ubuntu-latest
    name: Notifications
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
    - name: Notify Slack
      if: success()
      uses: 8398a7/action-slack@v3
      with:
        status: success
        text: "✅ React Migration deployment successful!"
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        
    - name: Notify Slack on failure
      if: failure()
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        text: "❌ React Migration deployment failed!"
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}